import Header from "@/components/header";
import { client } from "@/lib/apollo";
import { gql } from "@apollo/client";
import { RichText } from "@graphcms/rich-text-react-renderer";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { PostProps } from "./types";

const GET_POST = gql`
  query GetPost($slugPost: String) {
    post(where: { slug: $slugPost }) {
      id
      title
      content {
        json
      }
      author {
        name
      }
      createdAt
      coverImage {
        url
      }
    }
  }
`;

export default function Post({ post }: PostProps) {
  return (
    <>
      <Head>
        <title>BlogTech</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className="w-full max-w-[1120px] flex flex-col mx-auto pb-12 px-4">
        <Header />

        <Link
          href="/"
          className="flex w-full max-w-fit font-bold text-zinc-900 hover:text-zinc-600"
        >
          Voltar
        </Link>

        <div className="w-full h-full flex flex-col mt-8">
          <div className="flex w-full h-56 sm:h-80 lg:h-[392px] relative rounded-2xl overflow-hidden">
            <Image
              src={post.coverImage.url}
              alt=""
              fill={true}
              style={{ objectFit: "cover" }}
            />
          </div>
        </div>

        <div className="flex w-full flex-col mt-4 sm:mt-8">
          <h1 className="font-bold text-2xl sm:text-4xl lg:text-[40px] text-blue-600">
            {post.title}
          </h1>
          <div>
            <p className="font-bold text-zinc-900">{post.author.name}</p>
            <p className="text-zinc-600 text-sm">
              {format(new Date(post.createdAt), "dd 'de' MMM 'de' yyyy", {
                locale: ptBR,
              })}
            </p>
          </div>

          <div className="mt-4 sm:mt-8">
            <RichText
              content={post.content.json}
              renderers={{
                h1: ({ children }) => (
                  <h1 className="text-3xl font-bold text-zinc-900 mt-4">
                    {children}
                  </h1>
                ),
                h2: ({ children }) => (
                  <h2 className="text-2xl font-semibold text-zinc-800 mt-3">
                    {children}
                  </h2>
                ),
                h3: ({ children }) => (
                  <h3 className="text-xl font-semibold text-zinc-700 mt-2">
                    {children}
                  </h3>
                ),
                h4: ({ children }) => (
                  <h4 className="text-lg font-semibold text-zinc-600 mt-2">
                    {children}
                  </h4>
                ),
                h5: ({ children }) => (
                  <h5 className="text-base font-semibold text-zinc-500 mt-2">
                    {children}
                  </h5>
                ),
                h6: ({ children }) => (
                  <h6 className="text-sm font-semibold text-zinc-400 mt-2">
                    {children}
                  </h6>
                ),
                p: ({ children }) => (
                  <p className="text-zinc-800 text-base sm:text-lg lg:text-xl text-justify lg:text-left mt-2 leading-relaxed">
                    {children}
                  </p>
                ),
                blockquote: ({ children }) => (
                  <blockquote className="border-l-4 border-zinc-900 pl-4 italic text-zinc-700 my-4">
                    {children}
                  </blockquote>
                ),

                ul: ({ children }) => (
                  <ul className="list-disc list-inside pl-5 mb-2 text-zinc-700">
                    {children}
                  </ul>
                ),
                ol: ({ children }) => (
                  <ol className="list-decimal list-inside pl-5 mb-2 text-zinc-700">
                    {children}
                  </ol>
                ),
                li: ({ children }) => (
                  <li className="text-zinc-700 text-base sm:text-lg">
                    {children}
                  </li>
                ),
              }}
            />
          </div>
        </div>
      </div>
    </>
  );
}

export const getStaticProps: GetStaticProps = async (ctx) => {
  const slug = ctx.params?.slug;

  const { data } = await client.query({
    query: GET_POST,
    variables: {
      slugPost: slug,
    },
  });

  return {
    props: {
      post: data.post,
    },
    revalidate: 60 * 30, // 30 min
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [{ params: { slug: "react-19-tudo-sobre" } }],
    fallback: "blocking",
  };
};
